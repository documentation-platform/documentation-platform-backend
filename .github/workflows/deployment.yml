name: Deploy to Instances

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
      API_URL: ${{ secrets.API_URL }}

    steps:
      - name: Restart Server 1 (Instance 1)
        uses: oracle-actions/run-oci-cli-command@v1.1.1
        id: restart_instance_1
        with:
          command: "compute instance action --instance-id ${{ secrets.OCI_INSTANCE_ONE_OCID }} --action SOFTRESET"

      - name: Allow time for server to restart
        run: sleep 360

      - name: Check Server 1 Health
        uses: oracle-actions/run-oci-cli-command@v1.1.1
        id: check_instance_1_health
        with:
          command: "lb backend-health get --backend-name ${{ secrets.OCI_INSTANCE_ONE_PRIVATE_IP_AND_PORT }} --backend-set-name ${{ secrets.OCI_LB_BACKEND_SET }} --load-balancer-id ${{ secrets.OCI_LB_OCID }}"

      - name: Verify Server 1 Health Status
        run: |
          OUTPUT='${{ steps.check_instance_1_health.outputs.output }}'
          
          # Parse the status from data object
          HEALTH_STATUS=$(echo "$OUTPUT" | jq -r 'fromjson | .data.status')
          echo "Health Status: $HEALTH_STATUS"
          if [ "$HEALTH_STATUS" != "OK" ]; then
            echo "Server 1 health check failed! Status: $HEALTH_STATUS"
            exit 1
          fi

      - name: Restart Server 2 (Instance 2)
        uses: oracle-actions/run-oci-cli-command@v1.1.1
        id: restart_instance_2
        with:
          command: "compute instance action --instance-id ${{ secrets.OCI_INSTANCE_TWO_OCID }} --action SOFTRESET"

      - name: Allow time for server to restart
        run: sleep 360

      - name: Check Server 2 Health
        uses: oracle-actions/run-oci-cli-command@v1.1.1
        id: check_instance_2_health
        with:
          command: "lb backend-health get --backend-name ${{ secrets.OCI_INSTANCE_TWO_PRIVATE_IP_AND_PORT }} --backend-set-name ${{ secrets.OCI_LB_BACKEND_SET }} --load-balancer-id ${{ secrets.OCI_LB_OCID }}"

      - name: Verify Server 2 Health Status
        run: |
          OUTPUT='${{ steps.check_instance_2_health.outputs.output }}'
          
          # Parse the status from data object
          HEALTH_STATUS=$(echo "$OUTPUT" | jq -r 'fromjson | .data.status')
          echo "Health Status: $HEALTH_STATUS"
          if [ "$HEALTH_STATUS" != "OK" ]; then
            echo "Server 2 health check failed! Status: $HEALTH_STATUS"
            exit 1
          fi

      - name: Check deployment
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${API_URL}/api/health)
          if [ $response = "200" ]; then
            echo "Deployment successful!"
          else
            echo "Deployment failed!"
            exit 1
          fi
